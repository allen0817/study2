两个容器连通
一.link 
	docker run -it --name container1  --link container2 镜像  /bin/sh
	这样在container 可以用这个名来连接 ping   container2



二.bridge
1.新建自己的 bridge : docker network create -d  bridge  my-bridge
查看network  docker network ls 

查看网络桥接 (yum install bridge-utils)
brctl show 

2.有了bridge ,把我们要互相通信的容器连接到这个bridge，通过 --network my-bridge。一个容器可以连接多个bridge 

docker run -d --name centos3  --network my-bridge 镜像  /bin/sh

3.查看网络接口下的容器 
docker network inspect 5855349008ec(network ID)

4.把已存在的容器连接到新的网络中 
docker network connect my-bridge  容器
可以docker network inspect 5855349008ec(network ID)查看有没有连接到这个网络。可以 ping containerName 

同一个网络中的所有容器可以互通


三、network  none 
	--network none  
	这种容器没有网络接口，是孤立的。只能本地登录了，可用来存放一些安全要求高的的资料。

四、netwokr host 
    --netwokr host 
   拥有跟主机一样的网络接口，会有端口冲突，应用场景，我觉得就是为了省略做端口转发吧。   
 

桥接到别的容器时
比如容器1:reids   容器2:php 
现在php容器要用redis容器的服务，先桥接到同一网络，php容器启动时把redis容器名称加入环境变量，好处php容器不用知道redis容器的ip地址，用环境变量就可以了。如
docker run -it --name php --network  my-bridge -e REDIS_HOST=redis php镜像 /bin/bash 
这样在php容器就用获取环境变量来连接redis容器了


实例php 和 redis 连接到同一个网络  --network my-bridge.
php 
	<?php
		$redis = new Redis();
		$redis->connect('redis',6379);
		echo $redis->ping();
		echo PHP_EOL;
		$redis->set('name','allen');
		echo $redis->get('name');
		echo PHP_EOL;
		echo $redis->get('age');
redis  
	redis-cli 验证
	set age 18




