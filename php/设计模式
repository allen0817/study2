设计模式

1.单一责任原则 
2.里氏替换原则
	通俗的来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。它包含以下4层含义：

	1.子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。

	2.子类中可以增加自己特有的方法。

	3.当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。

	4.当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格





//单例模式

class  OnlyOne
{
    //静态变量保存全局实例
    private static $_instance = null;

    //私有构造函数，防止外界实例化对象
    private function __construct(){}

    //私有克隆函数，防止外办克隆对象

    private function __clone()
    {
        // TODO: Implement __clone() method.
    }

    //静态方法，单例统一访问入口
    static public function getInstance() {
        if (is_null ( self::$_instance ) || !isset ( self::$_instance )) {
            self::$_instance = new self ();
        }
        return self::$_instance;
    }

    public function hello(){
        echo "hello world<br>";
    }

}

单例模式调用：
        $only = OnlyOne::getInstance();
        $only->hello();









